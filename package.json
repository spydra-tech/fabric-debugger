{
  "name": "hyperledger-fabric-debugger",
  "displayName": "Hyperledger Fabric Debugger",
  "description": "Extension for Visual Studio Code that makes it easy for developers to build and debug Chaincode right from within the IDE.",
  "author": "Spydra",
  "version": "0.1.3",
  "publisher": "Spydra",
  "homepage": "https://www.spydra.app/?utm_source=vs_marketplace&utm_medium=fabric_debugger_plugin",
  "icon": "media/spydra-blue.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/spydra-tech/fabric-debugger"
  },
  "galleryBanner": {
    "color": "#000000",
    "theme": "dark"
  },
  "bugs": {
    "url": "https://github.com/spydra-tech/fabric-debugger/issues",
    "email": "info@spydra.app"
  },
  "license": "Apache-2.0",
  "engines": {
    "vscode": "^1.40.0"
  },
  "categories": [
    "Debuggers",
    "Programming Languages",
    "Testing",
    "Other"
  ],
  "keywords": [
    "Hyperledger Fabric",
    "Hyperledger",
    "Fabric",
    "Blockchain",
    "Distributed Ledger",
    "Chaincode",
    "Smart Contract",
    "Debug",
    "Debugging",
    "DLT"
  ],
  "pricing": "Free",
  "activationEvents": [
    "onDebugResolve:hlf-go",
    "onDebugResolve:hlf-node",
    "onLanguage:jsonc",
    "onView:hlfNetworks",
    "onView:hlfWallets",
    "onCommand:hlf.fabric.request",
    "onCommand:hlf.localnetwork.start",
    "onCommand:hlf.localnetwork.stop",
    "onCommand:hlf.localnetwork.restart",
    "onCommand:hlf.localnetwork.remove",
    "onCommand:hlf.localnetwork.refresh",
    "onCommand:hlf.identity.create",
    "onCommand:hlf.identity.remove",
    "onCommand:hlf.identity.refresh"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "hlf.fabric.request",
        "title": "Send Request",
        "category": "Hlf Debugger"
      },
      {
        "command": "hlf.localnetwork.start",
        "title": "Start Network",
        "category": "Hlf Debugger",
        "icon": "$(debug-start)"
      },
      {
        "command": "hlf.localnetwork.stop",
        "title": "Stop Network",
        "category": "Hlf Debugger",
        "icon": "$(debug-stop)"
      },
      {
        "command": "hlf.localnetwork.restart",
        "title": "Restart Network",
        "category": "Hlf Debugger",
        "icon": "$(debug-restart)"
      },
      {
        "command": "hlf.localnetwork.remove",
        "title": "Remove Network",
        "category": "Hlf Debugger",
        "icon": "$(desktop-download)"
      },
      {
        "command": "hlf.localnetwork.refresh",
        "title": "Refresh Network",
        "category": "Hlf Debugger",
        "icon": "$(refresh)"
      },
      {
        "command": "hlf.identity.create",
        "title": "Create User",
        "category": "Hlf Debugger",
        "icon": "$(plus)"
      },
      {
        "command": "hlf.identity.remove",
        "title": "Remove User",
        "category": "Hlf Debugger",
        "icon": "$(remove-close)"
      },
      {
        "command": "hlf.identity.refresh",
        "title": "Refresh Wallet",
        "category": "Hlf Debugger",
        "icon": "$(refresh)"
      },
      {
        "command": "hlf.link.open",
        "title": "Open External Link",
        "category": "Hlf Debugger"
      }
    ],
    "languages": [
      {
        "id": "jsonc",
        "extensions": [
          ".fabric"
        ]
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "hyperledger-fabric-debugger",
          "title": "Hyperledger Fabric Debugger",
          "icon": "media/spydra-blue.png"
        }
      ]
    },
    "views": {
      "hyperledger-fabric-debugger": [
        {
          "id": "hlfNetworks",
          "name": "Networks"
        },
        {
          "id": "hlfWallets",
          "name": "Wallets"
        },
        {
          "id": "hlfResources",
          "name": "Resources"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "hlf.localnetwork.refresh",
          "when": "view == hlfNetworks",
          "group": "navigation"
        },
        {
          "command": "hlf.identity.refresh",
          "when": "view == hlfWallets",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "hlf.localnetwork.start",
          "when": "view == hlfNetworks && viewItem == network",
          "group": "inline"
        },
        {
          "command": "hlf.localnetwork.stop",
          "when": "view == hlfNetworks && viewItem == network",
          "group": "inline"
        },
        {
          "command": "hlf.localnetwork.restart",
          "when": "view == hlfNetworks && viewItem == network",
          "group": "inline"
        },
        {
          "command": "hlf.localnetwork.remove",
          "when": "view == hlfNetworks && viewItem == network",
          "group": "inline"
        },
        {
          "command": "hlf.identity.create",
          "when": "view == hlfWallets && viewItem == organization",
          "group": "inline"
        },
        {
          "command": "hlf.identity.remove",
          "when": "view == hlfWallets && viewItem == wallet",
          "group": "inline"
        }
      ]
    },
    "debuggers": [
      {
        "type": "hlf-go",
        "label": "Fabric Chaincode - GO",
        "runtime": "node",
        "configurationSnippets": [
          {
            "label": "Go: Debug Fabric Chaincode",
            "description": "Debug Fabric Chaincode developed in golang",
            "body": {
              "name": "Debug Chaincode",
              "type": "hlf-go",
              "request": "launch",
              "isCaas": false
            }
          }
        ],
        "configurationAttributes": {
          "launch": {
            "required": [],
            "properties": {
              "debugAdapter": {
                "enum": [
                  "legacy",
                  "dlv-dap"
                ],
                "description": "Select which debug adapter to use with this launch configuration.",
                "default": "dlv-dap"
              },
              "program": {
                "type": "string",
                "description": "Path to the program folder (or any go file within that folder) when in `debug` or `test` mode, and to the pre-built binary file to debug in `exec` mode. If it is not an absolute path, the extension interpretes it as a workspace relative path.",
                "default": "${workspaceFolder}"
              },
              "isCaas": {
                "type": "boolean",
                "description": "Whether the Chaincode is written to run as the newer Chaincode as an External Service model.",
                "default": false
              },
              "mode": {
                "enum": [
                  "auto",
                  "debug",
                  "test",
                  "exec",
                  "replay",
                  "core"
                ],
                "description": "One of `auto`, `debug`, `test`, `exec`, `replay`, `core`. In `auto` mode, the extension will choose either `debug` or `test` depending on active editor window.",
                "default": "auto"
              },
              "traceDirPath": {
                "type": "string",
                "description": "Directory in which the record trace is located or to be created for a new output trace. For use on 'replay' mode only",
                "default": ""
              },
              "coreFilePath": {
                "type": "string",
                "description": "Path to the core dump file to open. For use on 'core' mode only",
                "default": ""
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop program after launch.",
                "default": false
              },
              "args": {
                "type": "array",
                "description": "Command line arguments passed to the debugged program.",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "showLog": {
                "type": "boolean",
                "description": "Show log output from the delve debugger. Maps to dlv's `--log` flag.",
                "default": false
              },
              "cwd": {
                "type": "string",
                "description": "Workspace relative or absolute path to the working directory of the program being debugged if a non-empty value is specified. The `program` folder is used as the working directory if `cwd` is omitted or empty.",
                "default": ""
              },
              "env": {
                "type": "object",
                "description": "Environment variables passed to the launched debuggee program. Format as string key:value pairs. Merged with `envFile` and `go.toolsEnvVars` with precedence `env` > `envFile` > `go.toolsEnvVars`.",
                "default": {}
              },
              "substitutePath": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "from": {
                      "type": "string",
                      "description": "The absolute local path to be replaced when passing paths to the debugger.",
                      "default": ""
                    },
                    "to": {
                      "type": "string",
                      "description": "The absolute remote path to be replaced when passing paths back to the client.",
                      "default": ""
                    }
                  }
                },
                "description": "An array of mappings from a local path (editor) to the remote path (debugee). This setting is useful when working in a file system with symbolic links, running remote debugging, or debugging an executable compiled externally. The debug adapter will replace the local path with the remote path in all of the calls.",
                "default": []
              },
              "buildFlags": {
                "type": "string",
                "description": "Build flags, to be passed to the Go compiler. Maps to dlv's `--build-flags` flag.",
                "default": ""
              },
              "dlvFlags": {
                "type": "array",
                "description": "Extra flags for `dlv`. See `dlv help` for the full list of supported. Flags such as `--log-output`, `--log`, `--log-dest`, `--api-version`, `--output`, `--backend` already have corresponding properties in the debug configuration, and flags such as `--listen` and `--headless` are used internally. If they are specified in `dlvFlags`, they may be ignored or cause an error.",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "port": {
                "type": "number",
                "description": "When applied to remote-attach configurations, will look for \"dlv ... --headless --listen=<host>:<port>\" server started externally. In dlv-dap mode this will apply to all other configurations as well. The extension will try to connect to an external server started with \"dlv dap --listen=<host>:<port>\" to ask it to launch/attach to the target process.",
                "default": 2345
              },
              "host": {
                "type": "string",
                "description": "When applied to remote-attach configurations, will look for \"dlv ... --headless --listen=<host>:<port>\" server started externally. In dlv-dap mode this will apply to all other configurations as well. The extension will try to connect to an external server started with \"dlv dap --listen=<host>:<port>\" to ask it to launch/attach to the target process.",
                "default": "127.0.0.1"
              },
              "trace": {
                "type": "string",
                "enum": [
                  "verbose",
                  "trace",
                  "log",
                  "info",
                  "warn",
                  "error"
                ],
                "default": "error",
                "description": "Various levels of logging shown in the debug console & 'Go Debug' output channel. When using the `legacy` debug adapter, the logs will also be written to a file if it is set to a value other than `error`."
              },
              "envFile": {
                "type": [
                  "string",
                  "array"
                ],
                "items": {
                  "type": "string"
                },
                "description": "Absolute path to a file containing environment variable definitions, formatted as string key=value pairs. Multiple files can be specified by provided an array of absolute paths. Merged with `env` and `go.toolsEnvVars` with precedence `env` > `envFile` > `go.toolsEnvVars`. ",
                "default": ""
              },
              "backend": {
                "type": "string",
                "enum": [
                  "default",
                  "native",
                  "lldb",
                  "rr"
                ],
                "description": "Backend used by delve. Maps to `dlv`'s `--backend` flag."
              },
              "output": {
                "type": "string",
                "description": "Output path for the binary of the debugee.",
                "default": "debug"
              },
              "logOutput": {
                "type": "string",
                "enum": [
                  "debugger",
                  "gdbwire",
                  "lldbout",
                  "debuglineerr",
                  "rpc",
                  "dap"
                ],
                "description": "Comma separated list of components that should produce debug output. Maps to dlv's `--log-output` flag. Check `dlv log` for details.",
                "default": "debugger"
              },
              "logDest": {
                "type": "string",
                "description": "dlv's `--log-dest` flag. See `dlv log` for details. Number argument is not allowed. Supported only in `dlv-dap` mode, and on Linux and Mac OS."
              },
              "dlvLoadConfig": {
                "type": "object",
                "properties": {
                  "followPointers": {
                    "type": "boolean",
                    "description": "FollowPointers requests pointers to be automatically dereferenced.",
                    "default": true
                  },
                  "maxVariableRecurse": {
                    "type": "number",
                    "description": "MaxVariableRecurse is how far to recurse when evaluating nested types.",
                    "default": 1
                  },
                  "maxStringLen": {
                    "type": "number",
                    "description": "MaxStringLen is the maximum number of bytes read from a string.",
                    "default": 64
                  },
                  "maxArrayValues": {
                    "type": "number",
                    "description": "MaxArrayValues is the maximum number of elements read from an array, a slice or a map.",
                    "default": 64
                  },
                  "maxStructFields": {
                    "type": "number",
                    "description": "MaxStructFields is the maximum number of fields read from a struct, -1 will read all fields.",
                    "default": -1
                  }
                },
                "description": "LoadConfig describes to delve, how to load values from target's memory. Not applicable when using `dlv-dap` mode.",
                "default": {
                  "followPointers": true,
                  "maxVariableRecurse": 1,
                  "maxStringLen": 64,
                  "maxArrayValues": 64,
                  "maxStructFields": -1
                }
              },
              "apiVersion": {
                "type": "number",
                "enum": [
                  1,
                  2
                ],
                "description": "Delve Api Version to use. Default value is 2. Maps to dlv's `--api-version` flag. Not applicable when using `dlv-dap` mode.",
                "default": 2
              },
              "stackTraceDepth": {
                "type": "number",
                "description": "Maximum depth of stack trace collected from Delve.",
                "default": 50
              },
              "showGlobalVariables": {
                "type": "boolean",
                "default": false,
                "description": "Boolean value to indicate whether global package variables should be shown in the variables pane or not."
              },
              "showRegisters": {
                "type": "boolean",
                "default": false,
                "description": "Boolean value to indicate whether register variables should be shown in the variables pane or not."
              },
              "hideSystemGoroutines": {
                "type": "boolean",
                "default": false,
                "description": "Boolean value to indicate whether system goroutines should be hidden from call stack view."
              },
              "console": {
                "default": "internalConsole",
                "description": "(Experimental) Where to launch the debugger and the debug target: internal console, integrated terminal, or external terminal. It is ignored in remote debugging.",
                "enum": [
                  "internalConsole",
                  "integratedTerminal",
                  "externalTerminal"
                ]
              },
              "asRoot": {
                "default": false,
                "description": "(Experimental) Debug with elevated permissions (on Unix). It requires `integrated` or `external` console modes and is ignored in remote debugging.",
                "type": "boolean"
              }
            }
          }
        }
      },
      {
        "type": "hlf-node",
        "label": "Fabric Chaincode - Node",
        "runtime": "node",
        "configurationSnippets": [
          {
            "label": "Node.js: Debug Fabric Chaincode",
            "description": "Debug Fabric Chaincode developed in JavaScript/TypeScript",
            "body": {
              "name": "Debug Chaincode",
              "type": "hlf-node",
              "request": "launch",
              "isCaas": false
            }
          }
        ],
        "configurationAttributes": {
          "launch": {
            "properties": {
              "program": {
                "type": "string",
                "description": "Absolute path to the program."
              },
              "isCaas": {
                "type": "boolean",
                "description": "Whether the Chaincode is written to run as the newer Chaincode as an External Service model.",
                "default": false
              },
              "cwd": {
                "type": "string",
                "description": "Absolute path to the working directory of the program being debugged.",
                "default": "${workspaceFolder}"
              },
              "args": {
                "type": "array",
                "description": "Command line arguments passed to the program.",
                "default": []
              },
              "runtimeArgs": {
                "type": "array",
                "description": "Optional arguments passed to the runtime executable.",
                "default": []
              },
              "env": {
                "type": "object",
                "description": "Environment variables passed to the program.",
                "default": {}
              },
              "envFile": {
                "type": "string",
                "description": "Absolute path to a file containing environment variable definitions.",
                "default": null
              },
              "runtimeVersion": {
                "type": "string",
                "description": "Version of node runtime to use. Requires nvm.",
                "default": "default"
              },
              "runtimeExecutable": {
                "type": "string",
                "description": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH.",
                "default": "node"
              },
              "nodeVersionHint": {
                "type": "number",
                "description": "Allows you to explicitly specify the Node version that's running.",
                "default": null
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop program after launch.",
                "default": true
              },
              "showAsyncStacks": {
                "type": "boolean",
                "description": "Show the async calls that led to the current call stack.",
                "default": true
              },
              "restart": {
                "type": "boolean",
                "description": "Try to reconnect to the program if we lose connection.",
                "default": false
              },
              "sourceMaps": {
                "type": "boolean",
                "description": "Use JavaScript source maps (if they exist).",
                "default": true
              },
              "resolveSourceMapLocations": {
                "type": "array",
                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files.",
                "items": {
                  "type": "string"
                },
                "default": [
                  "**",
                  "!**/node_modules/**"
                ]
              },
              "outFiles": {
                "type": "array",
                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with '!' the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                "items": {
                  "type": "string"
                },
                "default": [
                  "${workspaceFolder}/dist/**/*.js",
                  "!**/node_modules/**"
                ]
              },
              "outputCapture": {
                "type": "string",
                "description": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                "default": "console"
              },
              "profileStartup": {
                "type": "boolean",
                "description": "If true, will start profiling as soon as the process launches.",
                "default": false
              },
              "smartStep": {
                "type": "boolean",
                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                "default": true
              },
              "skipFiles": {
                "type": "array",
                "description": "An array of file or folder names, or glob patterns, to skip when debugging.",
                "items": {
                  "type": "string"
                },
                "default": [
                  "/**"
                ]
              },
              "trace": {
                "type": [
                  "boolean",
                  "string"
                ],
                "description": "When 'true', the debugger will log tracing info to a file. When 'verbose', it will also show logs in the console.",
                "default": true
              },
              "enableContentValidation": {
                "type": "boolean",
                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime.",
                "default": true
              },
              "timeout": {
                "type": "number",
                "description": "Retry for this number of milliseconds to connect to Node.js.",
                "default": 10000
              },
              "timeouts": {
                "type": "object",
                "description": "Timeouts for several debugger operations.",
                "default": {}
              }
            }
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^8.0.0",
    "@types/mocha": "^10.0.0",
    "@types/node": "16.x",
    "@types/vscode": "^1.40.0",
    "@typescript-eslint/eslint-plugin": "^5.59.11",
    "@typescript-eslint/parser": "^5.54.1",
    "@vscode/test-electron": "^2.2.3",
    "eslint": "^8.35.0",
    "glob": "^8.0.3",
    "mocha": "^10.2.0",
    "typescript": "^4.8.4"
  },
  "dependencies": {
    "@vscode/extension-telemetry": "^0.6.2",
    "json-pretty-html": "^1.1.6",
    "json5": "^2.2.3"
  }
}
